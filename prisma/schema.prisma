// Prisma schema for NextAuth + Domain models (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  // Local auth
  passwordHash  String?

  // Relations
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  quotes        Quote[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String       @id @default(cuid())
  name        String
  brand       String
  price       Int
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  categories  ProductCategory[]
  favorites   Favorite[]
}

model Category {
  id        String           @id @default(cuid())
  name      String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  products  ProductCategory[]
}

model ProductCategory {
  productId  String
  categoryId String

  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String?
  quoteId   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  quote   Quote?   @relation(fields: [quoteId], references: [id], onDelete: SetNull)
}

model Quote {
  id         String   @id @default(cuid())
  text       String
  author     String?
  mood       String?
  profession String?
  userId     String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  favorites Favorite[]
}
